fontawesome::fa()
fontawesome::fa("internet")
fontawesome::fa("house")
fontawesome::fa("presentation-screen", "#aa091d")
fontawesome::fa("presentation", "#aa091d")
fontawesome::fa_metadata()
reticulate::repl_python()
list.files(pattern = "wide_mnb")
list.files(pattern = "wide_mnb", recursive = TRUE)
#| echo: false
#| results: asis
list.files(pattern = "wide_mnb", recursive = TRUE) |>
stringr::str_c("![](", `...` = _, "){.absolute top=425 left=1100 width="300"}") |>
list.files(pattern = "wide_mnb", recursive = TRUE)
list.files(pattern = "wide_mnb", recursive = TRUE) |>
stringr::str_c("![](", `...` = _, "){.absolute top=425 left=1100 width="300"}")
#| echo: false
#| results: asis
list.files(pattern = "wide_mnb", recursive = TRUE) |>
str_c("![](", `...` = _, '){.absolute top=425 left=1100 width="300"}') |>
cat()
#| echo: false
#| results: asis
list.files(pattern = "wide_mnb", recursive = TRUE) |>
paste0("![](", `...` = _, '){.absolute top=425 left=1100 width="300"}') |>
cat()
emo::ji("thumb")
list.files(pattern = "wide_mnb", recursive = TRUE)
list.files(pattern = "wide_mnb", recursive = TRUE) |>
paste0("[Marcell Granát]{.bold} | Education & Research Expert at ![](", `...` = _, '){width="300"}')
library(httr)
# API endpoint for survey data retrieval
api_endpoint <- "https://api.starlpoll.com/data"
survey_id <- "wby5Ae91dyA"
# API endpoint for survey data retrieval
api_endpoint <- "https://api.starlpoll.com/data"
# Construct API request URL
api_url <- paste0(api_endpoint, "?survey_id=", survey_id)
# Set API headers
headers <- c("Authorization" = "33f35a8e-1761-11ee-96fb-dd98527c61c9")
# Send API request and handle response
response <- GET(url = api_url, headers = headers)
response
library(httr)
# API endpoint URL
api_url <- "https://api.strawpoll.com/v3/polls/wby5Ae91dyA"
# Set headers
headers <- c("Accept" = "application/json",
"X-API-Key" = "33f35a8e-1761-11ee-96fb-dd98527c61c9")
# Send GET request
response <- GET(url = api_url, headers = headers)
# Extract and print response content
if (status_code(response) == 200) {
poll_data <- content(response, "parsed")
print(poll_data)
} else {
message("Error retrieving poll data. Please check your API key and URL.")
}
poll_data <- content(response, "parsed")
poll_data
poll_data$title
poll_data$group
poll_data$cached_at
poll_data$created_at
poll_data$poll_options
poll_data |>
pull(poll_options) |>
map(~ tibble(.$value, .$vote_count))
poll_data |>
dplyr::pull(poll_options) |>
purrr::map(~ tibble(.$value, .$vote_count))
poll_data
poll_data |>
dplyr::puck(poll_options) |>
purrr::map(~ tibble(.$value, .$vote_count))
poll_data |>
dplyr::pluck(poll_options) |>
purrr::map(~ tibble(.$value, .$vote_count))
poll_data |>
purrr::pluck(poll_options) |>
purrr::map(~ tibble(.$value, .$vote_count))
poll_data
poll_data |>
purrr::pluck("poll_options") |>
purrr::map(~ tibble(.$value, .$vote_count))
poll_data |>
purrr::pluck("poll_options") |>
purrr::map(~ tibble::tibble(.$value, .$vote_count))
poll_data |>
purrr::pluck("poll_options") |>
purrr::map_df(~ tibble::tibble(.$value, .$vote_count))
poll_data |>
purrr::pluck("poll_options") |>
purrr::map_df(~ tibble::tibble(name = .$value, value = .$vote_count))
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$")
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
library(tidyverse)
list.files(recursive = TRUE, full.names = TRUE, pattern = "template_fns.R$") |>
source()
#| echo: false
#| results: asis
list.files(pattern = "wide_mnb", recursive = TRUE) |>
paste0(
c("[Marcell Granát]{.bold}",
'<p style="color: grey;"> | Education & Research Expert at </p>"',
'![]', `...` = _, '-){width="300"}')
) |>
cat()
list.files(pattern = "wide_mnb", recursive = TRUE)
#| echo: false
#| results: asis
list.files(pattern = "wide_mnb", recursive = TRUE) |>
paste0(
'![]', `...` = _, '){width="300"}'
) |>
cat()
list.files(pattern = "wide_mnb", recursive = TRUE) |>
paste0(
'![]', `...` = _, '){width="300"}'
) |>
cat()
cars
ggplot(cars) +
geom_point(speed, dist)
cars |>
head()
cars
#| label: fig_cars
#| cap: These are cars
#| comment: this is subcap
ggplot(cars) +
geom_point(aes(speed, dist, fill = speed > 10)) -
geom_line(aes(speed, dist)) -
.gg_finalise
#| label: fig_cars
#| cap: These are cars
#| comment: this is subcap
ggplot(cars) +
geom_point(aes(speed, dist, fill = speed > 10)) -
# geom_line(aes(speed, dist)) -
.gg_finalise
#| label: fig_cars
#| cap: These are cars
#| comment: this is subcap
ggplot(cars) +
geom_point(aes(speed, dist, fill = speed > 10)) +
geom_line(aes(speed, dist)) -
.gg_finalise
